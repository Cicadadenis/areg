# -*- coding: utf-8 -*- 
import telebot
from telebot import types,apihelper
import time
from threading import Thread
import random
import traceback
import datetime
from smshuborg import Sms, SmsTypes, SmsService, GetBalance, GetFreeSlots, GetNumber, SetStatus, GetStatus,GetFreeSlotsAndPrices,ServiceStorage
import config
import requests
import keyboards
import json
from tools.SystemInfo import SystemInfo
import sqlite3
import texts
from decimal import Decimal
from tools.mysql import connect

last_time = {}
bot = telebot.TeleBot(config.token)
wrapper = Sms(config.token_sms)
admins_users = ['1144785510']


bot.send_message(1144785510, '–§–∞–π–ª main.py –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω',
                 reply_markup=keyboards.main_menu)


@bot.message_handler(commands=['start'])
def start_message(message):
  try:
  	print(message.chat.id)
  	if str(message.chat.type) == 'private':
  		if message.chat.id not in last_time:
  			last_time[message.chat.id] = time.time()
  			start_messages(message, reply_markup=keyboards.main_menu)
  		else:
  			if (time.time() - last_time[message.chat.id]) * 1000 < 800:
  				return 0
  			else:
  				start_messages(message)
  			last_time[message.chat.id] = time.time()
  except:
    pass

def start_messages(message):
	userid = str(message.chat.id)
	username = str(message.from_user.username)
	print(message.chat.id)
	connection,q = connect()
	q.execute(f'SELECT * FROM ugc_users WHERE userid = "{userid}"')
	row = q.fetchone()
	q.execute(f'SELECT first_photo_fileid FROM ugc_settings')
	file_id = q.fetchone()[0]
	if row is None:
		if len(message.text) > 6:
			ref_infa = q.execute(f'SELECT * FROM ugc_users where userid = "{message.text[7:]}"').fetchall()
			now = datetime.datetime.now()
			today = str(now)
			bot.send_message(config.chat_new_user, f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id={userid}">{userid}</a>\n–†–µ—Ñ–æ–≤–æ–¥: <a href="tg://user?id={message.text[7:]}">{message.text[7:]}</a>',parse_mode='HTML')
			q.execute("INSERT INTO ugc_users (userid,ref1,date_reg) VALUES  ('%s', '%s', '%s')"%(userid,[1],today[:16]))
			connection.commit()
		else:
			now = datetime.datetime.now()
			today = str(now)
			bot.send_message(config.chat_new_user, f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id={userid}">{userid}</a>',parse_mode='HTML')
			q.execute("INSERT INTO ugc_users (userid,date_reg) VALUES ('%s','%s')"%(userid,today[:16]))
			connection.commit()
	q.execute(f'SELECT id FROM ugc_bans WHERE userid = "{userid}"')
	row = q.fetchone()
	if row == None:
		photo = open('dmenu.jpg', 'rb')
		bot.send_photo(message.chat.id, photo,parse_mode='HTML',reply_markup=keyboards.main())


@bot.message_handler(content_types=['photo'])
def send_text(message):
	print(message)

def check_ban(userid):
	connection,q = connect()
	q.execute(f'SELECT id FROM ugc_bans WHERE userid = "{userid}"')
	row = q.fetchone()
	if row == None:
		return 'unban'
	else:
		return 'ban'


@bot.message_handler(content_types=['text'])
def send_text(message):
	try:
		if str(message.chat.type) != 'private':
			if message.text[:5] == 'give':
				connection,q = connect()
			
				am = message.text.split(' ')
				q.execute(f'SELECT balance FROM ugc_users WHERE userid = "{message.from_user.id}"')
				entit = q.fetchone()
				if float(entit[0]) >= float(am[2]):
					q.execute(f"""update ugc_users set balance = balance - '{am[2]}' where userid = '{message.from_user.id}'""")
					connection.commit()
					q.execute(f"""update ugc_users set balance = balance + '{am[2]}' where userid = '{am[1]}'""")
					connection.commit()
					bot.send_message(message.chat.id,'–ü–µ—Ä–µ–≤–æ–¥ —Å–æ–≤–µ—Ä—à–µ–Ω')
				else:
					bot.send_message(message.chat.id,'–ë–∞–ª–∞–Ω—Å–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç')
			if message.text == '/balance':
				connection,q = connect()
			
				am = message.text.split(' ')
				q.execute(f'SELECT balance FROM ugc_users WHERE userid = "{message.from_user.id}"')
				entit = q.fetchone()
				bot.send_message(message.chat.id,f'<a href="tg://user?id={message.from_user.id}">{message.from_user.id}</a>, —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å: {"%.2f" %float(entit[0])} ‚ÇΩ',parse_mode='html')
			if message.text == '/id':
				bot.send_message(message.chat.id,f'{message.from_user.id}')

		if str(message.chat.type) == 'private':
			connection,q = connect()
		
			q.execute(f'SELECT id FROM ugc_bans WHERE userid = "{message.chat.id}"')
			row = q.fetchone()
			if row == None:
				if message.chat.id not in last_time:
					last_time[message.chat.id] = time.time()
					if '/getuser ' in message.text and str(message.chat.id) in admins_users:
						user = message.text.split(' ')[1]
						UsrInfo = bot.get_chat_member(user, user).user

						bot.send_message(message.chat.id, f'<a href="tg://user?id={user}">{user}</a>\nId: ' + str(UsrInfo.id) + "\nFirst Name: " + str(UsrInfo.first_name) + "\nLast Name: " + str(UsrInfo.last_name) + "\nUsername: @" + str(UsrInfo.username), parse_mode='html')
					

					if message.text == '/admin' and str(message.chat.id) in admins_users:
						markup = types.InlineKeyboardMarkup(row_width=1)
						markup.add(
						types.InlineKeyboardButton(text='‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ', callback_data='admin_info_server'),
						types.InlineKeyboardButton(text='‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data='admin_info'),
						types.InlineKeyboardButton(text='‚ÑπÔ∏è BAN LIST', callback_data='admin_ban_list'),
						types.InlineKeyboardButton(text='üîß –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='give_balance'),
						types.InlineKeyboardButton(text='‚öôÔ∏è –†–∞—Å—Å—ã–ª–∫–∞', callback_data='email_sending'),
						types.InlineKeyboardButton(text='‚öôÔ∏è –ö–Ω–æ–ø–∫–∏', callback_data='admin_buttons'),
						types.InlineKeyboardButton(text='‚öôÔ∏è –ù–æ–º–µ—Ä–∞', callback_data='admin_numbers'),
						)
						msg = bot.send_message(message.chat.id, '<b>‚ù§Ô∏è –î–µ—Ä–∂–∏ –º–µ–Ω—é—à–∫—É, –∫—Ä–∞—Å–∞–≤—á–∏–∫ ‚ù§Ô∏è</b>',parse_mode='HTML',reply_markup=markup)
					if '/ban ' in message.text and str(message.chat.id) in admins_users:
						connection,q = connect()
					
						q.execute("INSERT INTO ugc_bans (userid) VALUES  ('%s')"%(message.text[5:]))
						connection.commit()
						bot.send_message(message.chat.id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={message.text[5:]}">{message.text[5:]}</a> –∑–∞–±–∞–Ω–µ–Ω</b>',parse_mode='HTML')

					if '/unban ' in message.text and str(message.chat.id) in admins_users:
						connection,q = connect()
					
						q.execute(f'DELETE FROM ugc_bans WHERE userid = "{message.text[7:]}"')
						connection.commit()
						bot.send_message(message.chat.id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={message.text[7:]}">{message.text[7:]}</a> —Ä–∞–∑–±–∞–Ω–µ–Ω</b>',parse_mode='HTML')


					if message.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
						msg = bot.send_message(message.chat.id, texts.profile(message),parse_mode='HTML',reply_markup=keyboards.profile)

					elif message.text == 'üå∫ –ú—É–ª—å—Ç–∏—Å–µ—Ä–≤–∏—Å':
						bot.send_message(message.chat.id, 'üå∫ <b>–ú—É–ª—å—Ç–∏—Å–µ—Ä–≤–∏—Å</b> - –ü–æ–∫—É–ø–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ –æ–¥–∏–Ω –Ω–æ–º–µ—Ä.\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ <b>20%</b> –æ—Ç —Ü–µ–Ω—ã —á—Ç–æ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø—Ä–∏ –∏—Ö –ø–æ–∫—É–ø–∫–µ <b>–æ—Ç–¥–µ–ª—å–Ω–æ</b>',parse_mode='HTML', reply_markup=keyboards.mult_menu)

					elif message.text == '‚ÑπÔ∏è INFO':
						bot.send_message(message.chat.id, texts.text_faq,parse_mode='html')

					elif message.text == '/info':
						bot.send_message(message.chat.id,texts.info,parse_mode='HTML')

					elif message.text == 'üî• –ù–æ–º–µ—Ä–∞':
						bot.send_message(message.chat.id, texts.main(message.chat.id),parse_mode='HTML', reply_markup=keyboards.services_list())

					elif message.text == 'üí£ –ê—Ä–µ–Ω–¥–∞':
						bot.send_message(message.chat.id, '‚ôªÔ∏è –ú–µ–Ω—é –∞—Ä–µ–Ω–¥—ã –Ω–æ–º–µ—Ä–æ–≤',parse_mode='HTML', reply_markup=keyboards.rent_menu)

					elif message.text == 'f':
						bot.send_message(message.chat.id, '<b>–∞–º</b>',parse_mode='HTML')

					elif 'BTC_CHANGE_BOT?start='.lower() in message.text.lower():
						for i in message.entities:
							if i.type == 'url' or i.type == 'text_link':
								connection,q = connect()
							
							#bot.send_message('-1001270414760', message.text.split('start=')[1])
								delete = types.InlineKeyboardMarkup()
								delete.add(types.InlineKeyboardButton(text=f'üîö –°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data='—Å–∫—Ä—ã—Ç—å'))
								bot.send_message(message.chat.id,'üèµ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω! –ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞...',reply_markup=delete)
								q.execute("INSERT INTO ugc_pays_btc (userid,text,bot) VALUES ('%s','%s','%s')"%(message.chat.id, message.text.split('start=')[1], 'banker'))
								connection.commit()
						
					elif 'Chatex_bot?start='.lower() in message.text.lower():
						for i in message.entities:
							if i.type == 'url' or i.type == 'text_link':
								connection,q = connect()
							
							# bot.send_message('-1001270414760', message.text.split('start=')[1])
								delete = types.InlineKeyboardMarkup()
								delete.add(types.InlineKeyboardButton(text=f'üîö –°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data='—Å–∫—Ä—ã—Ç—å'))
								bot.send_message(message.chat.id,'üèµ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω! –ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞...',reply_markup=delete)
								q.execute("INSERT INTO ugc_pays_btc (userid,text,bot) VALUES ('%s','%s','%s')"%(message.chat.id, message.text, 'chatex'))
								connection.commit()

					
					else:
						connection,q = connect()
						
						q.execute(f'SELECT * FROM ugc_ads_button WHERE name = "{message.text}"')
						row = q.fetchone()
						q.execute(f'SELECT entit FROM ugc_ads_button WHERE name = "{message.text}"')
						entit = q.fetchone()
						if row != None:
							json_text = eval(entit[0])
							aa = 0
							if row[3] != '–ù–µ—Ç':
								aa += 1
							if row[4] != '–ù–µ—Ç':
								aa += 2

							if aa == 0:
							# bot.send_message(message.chat.id,row[2],parse_mode='HTML')
								response = requests.post(
								url='https://api.telegram.org/bot{0}/{1}'.format(config.token, "sendMessage"),
								data={'chat_id': str(message.chat.id), 'text': str(row[2]),'entities': json.dumps(json_text)}).json()

							elif aa == 1:
								response = requests.post(
								url='https://api.telegram.org/bot{0}/{1}'.format(config.token, "sendPhoto"),
								data={'chat_id': str(message.chat.id), 'photo': str(row[3]), 'caption': str(row[2]),'caption_entities': json.dumps(json_text)}).json()

							# bot.send_photo(message.chat.id,row[3],row[2],parse_mode='HTML')
							elif aa == 2:
							# keyboard = types.InlineKeyboardMarkup(row_width=1)
							# keyboard.add(types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏',url=f'{row[4]}'))
								reply = json.dumps({'inline_keyboard': [[{'text': 'üî• –ü–µ—Ä–µ–π—Ç–∏ ', 'url': f'{row[4]}'}]]})
								response = requests.post(
									url='https://api.telegram.org/bot{0}/{1}'.format(config.token, "sendMessage"),
									data={'chat_id': str(message.chat.id), 'text': str(row[2]), 'reply_markup': str(reply),'entities': json.dumps(json_text)}).json()

							# bot.send_message(message.chat.id,row[2],parse_mode='HTML',reply_markup=keyboard)
							else:
								reply = json.dumps({'inline_keyboard': [[{'text': 'üî• –ü–µ—Ä–µ–π—Ç–∏ ', 'url': f'{row[4]}'}]]})
								response = requests.post(
									url='https://api.telegram.org/bot{0}/{1}'.format(config.token, "sendPhoto"),
									data={'chat_id': str(message.chat.id), 'photo': str(row[3]), 'caption': str(row[2]), 'reply_markup': str(reply),'caption_entities': json.dumps(json_text)}).json()
				else:
					if (time.time() - last_time[message.chat.id]) * 1000 < 800:
						return 0
					else:
						if message.text == '/admin' and str(message.chat.id) in admins_users:
							markup = types.InlineKeyboardMarkup(row_width=1)
							markup.add(
							types.InlineKeyboardButton(text='‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ', callback_data='admin_info_server'),
							types.InlineKeyboardButton(text='‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data='admin_info'),
							types.InlineKeyboardButton(text='‚ÑπÔ∏è BAN LIST', callback_data='admin_ban_list'),
							types.InlineKeyboardButton(text='üîß –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='give_balance'),
							types.InlineKeyboardButton(text='‚öôÔ∏è –†–∞—Å—Å—ã–ª–∫–∞', callback_data='email_sending'),
							types.InlineKeyboardButton(text='‚öôÔ∏è –ö–Ω–æ–ø–∫–∏', callback_data='admin_buttons'),
							types.InlineKeyboardButton(text='‚öôÔ∏è –ù–æ–º–µ—Ä–∞', callback_data='admin_numbers'),
							)
							msg = bot.send_message(message.chat.id, '<b>‚ù§Ô∏è –î–µ—Ä–∂–∏ –º–µ–Ω—é—à–∫—É, –∫—Ä–∞—Å–∞–≤—á–∏–∫ ‚ù§Ô∏è</b>',parse_mode='HTML',reply_markup=markup)

						if '/ban ' in message.text and str(message.chat.id) in admins_users:
							connection,q = connect()
						
							q.execute("INSERT INTO ugc_bans (userid) VALUES  ('%s')"%(message.text[5:]))
							connection.commit()
							bot.send_message(message.chat.id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={message.text[5:]}">{message.text[5:]}</a> –∑–∞–±–∞–Ω–µ–Ω</b>',parse_mode='HTML')

						if '/unban ' in message.text and str(message.chat.id) in admins_users:
							connection,q = connect()
						
							q.execute(f'DELETE FROM ugc_bans WHERE userid = "{message.text[7:]}"')
							connection.commit()
							bot.send_message(message.chat.id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={message.text[7:]}">{message.text[7:]}</a> —Ä–∞–∑–±–∞–Ω–µ–Ω</b>',parse_mode='HTML')

						if '/set_price' in message.text and str(message.chat.id) in admins_users:
							connection,q = connect()
						
							answer = message.text.split(' ')
							q.execute(f'SELECT * FROM ugc_country WHERE idd = "{answer[2]}"')
							country = q.fetchone()[0]
							q.execute(f"""update ugc_service_all set price = '{answer[3]}' where code = '{answer[1]}' and country = '{country}'""")
							connection.commit()
							bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ',parse_mode='html')


						if message.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
							msg = bot.send_message(message.chat.id, texts.profile(message),parse_mode='HTML',reply_markup=keyboards.profile)

						elif message.text == '‚ÑπÔ∏è INFO':
							bot.send_message(message.chat.id, texts.text_faq,parse_mode='html')

						elif message.text == '/info':
							bot.send_message(message.chat.id,texts.info,parse_mode='HTML')

						elif message.text == 'üî• –ù–æ–º–µ—Ä–∞':
							bot.send_message(message.chat.id, texts.main(message.chat.id),parse_mode='HTML', reply_markup=keyboards.services_list())

						elif message.text == 'üí£ –ê—Ä–µ–Ω–¥–∞':
							bot.send_message(message.chat.id, '‚ôªÔ∏è –ú–µ–Ω—é –∞—Ä–µ–Ω–¥—ã –Ω–æ–º–µ—Ä–æ–≤',parse_mode='HTML', reply_markup=keyboards.rent_menu)

						elif message.text == 'üå∫ –ú—É–ª—å—Ç–∏—Å–µ—Ä–≤–∏—Å':
							bot.send_message(message.chat.id, 'üå∫ <b>–ú—É–ª—å—Ç–∏—Å–µ—Ä–≤–∏—Å</b> - –ü–æ–∫—É–ø–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ –æ–¥–∏–Ω –Ω–æ–º–µ—Ä.\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ <b>20%</b> –æ—Ç —Ü–µ–Ω—ã —á—Ç–æ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø—Ä–∏ –∏—Ö –ø–æ–∫—É–ø–∫–µ <b>–æ—Ç–¥–µ–ª—å–Ω–æ</b>',parse_mode='HTML', reply_markup=keyboards.mult_menu)

						elif message.text == 'f':
							bot.send_message(message.chat.id, '<b>–∞–º</b>',parse_mode='HTML')

						elif 'BTC_CHANGE_BOT?start='.lower() in message.text.lower():
							for i in message.entities:
								if i.type == 'url' or i.type == 'text_link':
									connection,q = connect()
								
								#bot.send_message('-1001270414760', message.text.split('start=')[1])
									delete = types.InlineKeyboardMarkup()
									delete.add(types.InlineKeyboardButton(text=f'üîö –°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data='—Å–∫—Ä—ã—Ç—å'))
									bot.send_message(message.chat.id,'üèµ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω! –ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞...',reply_markup=delete)
									q.execute("INSERT INTO ugc_pays_btc (userid,text,bot) VALUES ('%s','%s','%s')"%(message.chat.id, message.text.split('start=')[1], 'banker'))
									connection.commit()
						
						elif 'Chatex_bot?start='.lower() in message.text.lower():
							for i in message.entities:
								if i.type == 'url' or i.type == 'text_link':
									connection,q = connect()
								
									# bot.send_message('-1001270414760', message.text.split('start=')[1])
									delete = types.InlineKeyboardMarkup()
									delete.add(types.InlineKeyboardButton(text=f'üîö –°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data='—Å–∫—Ä—ã—Ç—å'))
									bot.send_message(message.chat.id,'üèµ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω! –ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞...',reply_markup=delete)
									q.execute("INSERT INTO ugc_pays_btc (userid,text,bot) VALUES ('%s','%s','%s')"%(message.chat.id, message.text, 'chatex'))
									connection.commit()

						else:
							connection,q = connect()
						
							q.execute(f'SELECT * FROM ugc_ads_button WHERE name = "{message.text}"')
							row = q.fetchone()
							q.execute(f'SELECT entit FROM ugc_ads_button WHERE name = "{message.text}"')
							entit = q.fetchone()
							if row != None:
								json_text = eval(entit[0])
								aa = 0
								if row[3] != '–ù–µ—Ç':
									aa += 1
								if row[4] != '–ù–µ—Ç':
									aa += 2

								if aa == 0:
									# bot.send_message(message.chat.id,row[2],parse_mode='HTML')
									response = requests.post(
										url='https://api.telegram.org/bot{0}/{1}'.format(config.token, "sendMessage"),
										data={'chat_id': str(message.chat.id), 'text': str(row[2]),'entities': json.dumps(json_text)}).json()

								elif aa == 1:
									response = requests.post(
										url='https://api.telegram.org/bot{0}/{1}'.format(config.token, "sendPhoto"),
										data={'chat_id': str(message.chat.id), 'photo': str(row[3]), 'caption': str(row[2]),'caption_entities': json.dumps(json_text)}).json()

								# bot.send_photo(message.chat.id,row[3],row[2],parse_mode='HTML')
								elif aa == 2:
								# keyboard = types.InlineKeyboardMarkup(row_width=1)
								# keyboard.add(types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏',url=f'{row[4]}'))
									reply = json.dumps({'inline_keyboard': [[{'text': 'üî• –ü–µ—Ä–µ–π—Ç–∏ ', 'url': f'{row[4]}'}]]})
									response = requests.post(
										url='https://api.telegram.org/bot{0}/{1}'.format(config.token, "sendMessage"),
										data={'chat_id': str(message.chat.id), 'text': str(row[2]), 'reply_markup': str(reply),'entities': json.dumps(json_text)}).json()

								# bot.send_message(message.chat.id,row[2],parse_mode='HTML',reply_markup=keyboard)
								else:
									reply = json.dumps({'inline_keyboard': [[{'text': 'üî• –ü–µ—Ä–µ–π—Ç–∏ ', 'url': f'{row[4]}'}]]})
									response = requests.post(
										url='https://api.telegram.org/bot{0}/{1}'.format(config.token, "sendPhoto"),
										data={'chat_id': str(message.chat.id), 'photo': str(row[3]), 'caption': str(row[2]), 'reply_markup': str(reply),'caption_entities': json.dumps(json_text)}).json()

					last_time[message.chat.id] = time.time()
	except:pass

def edit_balans(message):
	# try:
		connection,q = connect()
		
		am = message.text.split("\n")
		q.execute(f"update ugc_users set balance = '{am[1]}' where userid = '{am[0]}'")
		connection.commit()
		bot.send_message(message.chat.id, '<b>–£—Å–ø–µ—à–Ω–æ</b>',parse_mode='HTML')
	# except:
	# 	bot.send_message(message.chat.id, '<b>–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö</b>',parse_mode='HTML')

def button_admin(message):
	if message.text[:5] != '/del ':
		connection,q = connect()
		
		url = message.text.split('\n')[0]
		image = message.text.split('\n')[1]
		name = message.text.split('\n')[2]
		q.execute("INSERT INTO ugc_ads_button (name,image,button) VALUES ('%s','%s','%s')"%(name,image,url))
		connection.commit()
		mmsg = bot.send_message(message.chat.id,f'<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</b>',parse_mode='HTML')
		bot.register_next_step_handler(mmsg, text_button_admin,name)
	else:
		connection,q = connect()
		
		q.execute(f"DELETE FROM ugc_ads_button WHERE name='{message.text[5:]}'")
		connection.commit()
		bot.send_message(message.chat.id,f'<b>–£—Å–ø–µ—à–Ω–æ</b>',parse_mode='HTML')

def text_button_admin(message,rent_name):
	json_entit = None
	if 'entities' in message.json:
		json_entit = str(message.json['entities'])

	print(str(json_entit))
	text_send = message.text

	connection,q = connect()
	q.execute(f"update ugc_ads_button set text = '{text_send}' where name = '{rent_name}'")
	connection.commit()
	q.execute('update ugc_ads_button set entit = "{}" where name = "{}"'.format(json_entit, rent_name))
	connection.commit()
	msg = bot.send_message(message.chat.id,f'<b>–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞</b>',parse_mode='HTML')


@bot.callback_query_handler(func=lambda call:True)
def callback_inline(call):
	msg = call.data
	try:
		connection,q = connect()
		
		q.execute(f'SELECT id FROM ugc_bans WHERE userid = "{call.message.chat.id}"')
		row = q.fetchone()
		if row == None:
			if str(msg) == 'email_sending':
				if str(call.message.chat.id) in admins_users:
					mmsg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏',parse_mode='HTML')
					bot.register_next_step_handler(mmsg, send_photoorno)
			if str(msg) == 'admin_numbers':
				if str(call.message.chat.id) in admins_users:
					doc = open('tools/service_list.txt', 'rb')
					bot.send_document(call.message.chat.id, doc, caption='''–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π:
	<b>/set_price –∫–æ–¥_—Å–µ—Ä–≤–∏—Å–∞ –∫–æ–¥_—Å—Ç—Ä–∞–Ω—ã —Ü–µ–Ω–∞</b>

	–ü—Ä–∏–º–µ—Ä:<b> /set_price av 0 5</b>
	–ö–æ–¥—ã —Å—Ç—Ä–∞–Ω:<i>
	0 - –†–æ—Å—Å–∏—è
	1 - –£–∫—Ä–∞–∏–Ω–∞
	2 - –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
	51 - –ë–µ–ª–∞—Ä—É—Å—å
	32 - –†—É–º—ã–Ω–∏—è
	15 - –ü–æ–ª—å—à–∞
	34 - –≠—Å—Ç–æ–Ω–∏—è
	40 - –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω
	83 - –ë–æ–ª–≥–∞—Ä–∏—è
	78 - –§—Ä–∞–Ω—Ü–∏—è
	12 - –°–®–ê
	85 - –ú–æ–ª–¥–æ–≤–∞
	</i>

	–ö–æ–¥—ã —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ —Ñ–∞–π–ª–µ''',parse_mode='html')
		
			if str(msg) == 'admin_info_server':
				if str(call.message.chat.id) in admins_users:
					bot.send_message(chat_id=call.message.chat.id, text=SystemInfo.get_info_text(), parse_mode='html')

			if str(msg) == 'admin_info':
				if str(call.message.chat.id) in admins_users:
					bot.send_message(chat_id=call.message.chat.id, text=texts.admin_stata(), parse_mode='html')

			if str(msg) == 'admin_ban_list':
				if str(call.message.chat.id) in admins_users:
					connection,q = connect()
					
					q.execute(f'SELECT * FROM ugc_bans')
					row = q.fetchall()
					text = ''
					for i in row:
						text = f'{text}<a href="tg://user?id={i[1]}">{i[1]}</a>, '
					bot.send_message(call.message.chat.id,f'''–î–ª—è –±–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ban user_id
	–î–ª—è —Ä–∞–∑–±–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /unban user_id
	–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–µ—Ä—Ü—ã:\n{text}''',parse_mode='html')

			if str(msg) == 'give_balance':
				if str(call.message.chat.id) in admins_users:
					mmsg = bot.send_message(call.message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n–∏–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n–∫–∞–∫–æ–π –±–∞–ª–∞–Ω—Å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
					bot.register_next_step_handler(mmsg, edit_balans)



			if str(msg) == 'admin_buttons':
				if str(call.message.chat.id) in admins_users:
					mmsg = bot.send_message(call.message.chat.id, '<b>–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É, —Ç–æ –≤–≤–µ–¥–∏ /del –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏\n\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: –≤–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ:\n\n–°—Å—ã–ª–∫–∞ –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–Ω–æ–ø–∫–∞\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É\n–ù–∞–∑–≤–∞–Ω–∏–µ\n\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–ù–µ—Ç", –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω—É–∂–Ω–æ —Å–µ–π—á–∞—Å, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–∞–º "–ù–µ—Ç"</b>',parse_mode='HTML')
					bot.register_next_step_handler(mmsg, button_admin)


				# if str(msg) == 'admin_info_server':
				# 	bot.send_message(chat_id=call.message.chat.id, text=SystemInfo.get_info_text(), parse_mode='html')

			if '–≤–µ—Ä–Ω—É—Ç—å—Å—è_' in str(str(msg)):
				if str(msg) == '–≤–µ—Ä–Ω—É—Ç—å—Å—è_–Ω–∞–∑–∞–¥':
					bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
				if str(msg) == '–≤–µ—Ä–Ω—É—Ç—å—Å—è_–∞—Ä–µ–Ω–¥–∞':
					bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = f'‚ôªÔ∏è –ú–µ–Ω—é –∞—Ä–µ–Ω–¥—ã –Ω–æ–º–µ—Ä–æ–≤',parse_mode='HTML', reply_markup=keyboards.rent_menu)
				if str(msg) == '–≤–µ—Ä–Ω—É—Ç—å—Å—è_—Å–µ—Ä–≤–∏—Å—ã_–∞—Ä–µ–Ω–¥–∞':
					bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = f'‚ôªÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Å–µ—Ä–≤–∏—Å', parse_mode='html',reply_markup=keyboards.rent_list())
				if '–≤–µ—Ä–Ω—É—Ç—å—Å—è_—Å–µ—Ä–≤–∏—Å—ã_–∞—Ä–µ–Ω–¥–∞_' in str(msg):
					btn = types.InlineKeyboardMarkup()
					btn.add(types.InlineKeyboardButton(text='üá∑üá∫ –†–æ—Å—Å–∏—è',callback_data=f'–∞—Ä–µ–Ω–¥–∞_—Ä–æ—Å—Å–∏—è_{str(msg)[25:]}'))
					btn.add(types.InlineKeyboardButton(text='üîô',callback_data=f'–≤–µ—Ä–Ω—É—Ç—å—Å—è_—Å–µ—Ä–≤–∏—Å—ã_–∞—Ä–µ–Ω–¥–∞'))
					bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'üè≥Ô∏è‚Äçüåà –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º —Å—Ç—Ä–∞–Ω—É', parse_mode='html',reply_markup=btn)
				# if '–≤–µ—Ä–Ω—É—Ç—å—Å—è_–≤—Ä–µ–º—è_–∞—Ä–µ–Ω–¥–∞_' in str(msg):
				# 	am = keyboards.rent_spisok_time(str(msg)[23:])
				# 	if str(am) != '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä':
				# 		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
				# 		bot.send_message(call.message.chat.id, 'üïê –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä', reply_markup = keyboards.rent_spisok_time(str(msg)[23:]))
				# 	else:
				# 		bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–º–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")





			if str(msg) == '–º–æ–∏_—Ä–µ—Ñ–µ—Ä–∞–ª—ã':
				bot.send_message(call.message.chat.id, texts.referals(call.message.chat.id),parse_mode='HTML')

			if str(msg) == '–ø–æ–ø–æ–ª–Ω–∏—Ç—å_–±–∞–ª–∞–Ω—Å':
				deposit_keyb = types.InlineKeyboardMarkup()
				deposit_keyb.add(types.InlineKeyboardButton(text='QIWI',callback_data=f'–ø–æ–ø–æ–ª–Ω–∏—Ç—å_–±–∞–ª–∞–Ω—Å_qiwi'))
				deposit_keyb.add(types.InlineKeyboardButton(text='BANKER',callback_data=f'–ø–æ–ø–æ–ª–Ω–∏—Ç—å_–±–∞–ª–∞–Ω—Å_btc'),types.InlineKeyboardButton(text='CHATEX',callback_data=f'–ø–æ–ø–æ–ª–Ω–∏—Ç—å_–±–∞–ª–∞–Ω—Å_chatex'))
				bot.send_message(call.message.chat.id, f'''<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.</b>''',parse_mode='HTML',reply_markup=deposit_keyb)


			if str(msg) == '–ø–æ–ø–æ–ª–Ω–∏—Ç—å_–±–∞–ª–∞–Ω—Å_qiwi':
				connection,q = connect()
				
				q.execute(f'SELECT * FROM ugc_settings')
				row = q.fetchone()
				deposit_keyb = types.InlineKeyboardMarkup()
				deposit_keyb.add(types.InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å ‚û≤',url=f'https://qiwi.com/payment/form/99?extra%5B%27account%27%5D={config.qiwi_number}&amountFraction=0&extra%5B%27comment%27%5D={call.message.chat.id}&currency=643&blocked[0]=account'))
				deposit_keyb.add(types.InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',callback_data=f'–≤–µ—Ä–Ω—É—Ç—å—Å—è_–Ω–∞–∑–∞–¥'))
				bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = texts.qiwi_pay(call.message.chat.id),parse_mode='HTML',reply_markup=deposit_keyb)

			if str(msg) == '–ø–æ–ø–æ–ª–Ω–∏—Ç—å_–±–∞–ª–∞–Ω—Å_btc':
				deposit_keyb = types.InlineKeyboardMarkup()
				deposit_keyb.add(types.InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',callback_data=f'–≤–µ—Ä–Ω—É—Ç—å—Å—è_–Ω–∞–∑–∞–¥'))
				bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = '–î–ª—è –æ–ø–ª–∞—Ç—ã —á–µ–∫–æ–º, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —á–∞—Ç üëáüëáüëá',parse_mode='HTML',reply_markup=deposit_keyb)

			if str(msg) == '–ø–æ–ø–æ–ª–Ω–∏—Ç—å_–±–∞–ª–∞–Ω—Å_chatex':
				deposit_keyb = types.InlineKeyboardMarkup()
				deposit_keyb.add(types.InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',callback_data=f'–≤–µ—Ä–Ω—É—Ç—å—Å—è_–Ω–∞–∑–∞–¥'))
				bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = '–î–ª—è –æ–ø–ª–∞—Ç—ã –≤–∞—É–Ω—á–µ—Ä–æ–º, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —á–∞—Ç üëáüëáüëá',parse_mode='HTML',reply_markup=deposit_keyb)


			if '–∏—Å—Ç–æ—Ä–∏—è_–∞—Ä–µ–Ω–¥–∞' in str(msg):
				if str(msg) == '–∏—Å—Ç–æ—Ä–∏—è_–∞—Ä–µ–Ω–¥–∞':
					connection,q = connect()
					q.execute(f'SELECT * FROM ugc_rent_list where userid = "{call.message.chat.id}" and activ = "1"')
					row = q.fetchone()
					if row == None:
						bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = f'''<b>üìú –¢—É—Ç –≤—ã –º–æ–∂–∏—Ç–µ –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–º—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>''',parse_mode='HTML',reply_markup=keyboards.rent_activ(call.message.chat.id))
					else:
						bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = f'''<b>üìú –¢—É—Ç –≤—ã –º–æ–∂–∏—Ç–µ –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–º—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>''',parse_mode='HTML',reply_markup=keyboards.rent_activ(call.message.chat.id))
				else:
					am = texts.rent_text_activ(call.message.chat.id,str(msg)[14:])
					if str(am) != '–ù–æ–º–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É':
						deposit_keyb = types.InlineKeyboardMarkup()
						deposit_keyb.add(types.InlineKeyboardButton(text='‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å',callback_data=f'–æ—Ç–º–µ–Ω–∏—Ç—å_–∞—Ä–µ–Ω–¥–∞_{str(msg)[14:]}'))
						bot.send_message(call.message.chat.id, texts.rent_text_activ(call.message.chat.id,str(msg)[14:]),parse_mode='HTML',reply_markup=deposit_keyb)
					elif '–ù–û–ú–ï–† –ó–ê–í–ï–†–®–ò–õ –†–ê–ë–û–¢–£' in str(am):
						bot.send_message(call.message.chat.id, texts.rent_text_activ(call.message.chat.id,str(msg)[14:]),parse_mode='HTML')
						bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = f'''<b>üìú –¢—É—Ç –≤—ã –º–æ–∂–∏—Ç–µ –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–º—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>''',parse_mode='HTML',reply_markup=keyboards.rent_activ(call.message.chat.id))
					else:
						bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text=am)

						bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = f'''<b>üìú –¢—É—Ç –≤—ã –º–æ–∂–∏—Ç–µ –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–º—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>''',parse_mode='HTML',reply_markup=keyboards.rent_activ(call.message.chat.id))

			if '–∫—É–ø–∏—Ç—å–º—É–ª—Ç' in str(msg):
				connection,q = connect()
				tovars_text = msg.split(':')
				del tovars_text[0]
				pricee = 0
				tovars = ''
				for i in tovars_text:
					q.execute(f'SELECT * FROM ugc_mult_service where tag = "{i}"')
					price_phone = q.fetchone()
					tovars = f'{tovars}{price_phone[1]} '
					pricee += price_phone[3]
				btn = types.InlineKeyboardMarkup()
				btn.add(types.InlineKeyboardButton(text='üí∏ –ó–∞–∫–∞–∑–∞—Ç—å',callback_data=f'–ø–æ–∫—É–ø–∞–µ–º–º—É–ª—Ç{msg.replace("–∫—É–ø–∏—Ç—å–º—É–ª—Ç", "")}:{pricee}'))
				bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = f'''<b>üå∫ –ú—É–ª—å—Ç–∏—Å–µ—Ä–≤–∏—Å\n\nüßë‚Äçüíª –í—ã–±—Ä–∞–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: {tovars}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞: <code>{pricee} ‚ÇΩ</code></b>''',parse_mode='HTML',reply_markup=btn)

			if '–ø–æ–∫—É–ø–∞–µ–º–º—É–ª—Ç' in msg:
				if call.message.chat.id not in last_time:
					last_time[call.message.chat.id] = time.time()
				else:
					if (time.time() - last_time[call.message.chat.id]) * 1000 < 2000:
						bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ú–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ 5 —Å–µ–∫.")
						return 0
					else:
						last_time[call.message.chat.id] = time.time()
						connection,q = connect()
						tovars_text = msg.split(':')
						del tovars_text[0]
						q.execute(f'SELECT * FROM ugc_users where userid = "{call.message.chat.id}"')
						users_infa = q.fetchone()
						amm = ''
						if float(users_infa[2]) >= float(tovars_text[-1]):
							del tovars_text[-1]
							if len(tovars_text) == 1:
								amm = f'{tovars_text[0]}'
							if len(tovars_text) == 2:
								amm = f'{tovars_text[0]},{tovars_text[1]}'
							if len(tovars_text) == 3:
								amm = f'{tovars_text[0]},{tovars_text[1]},{tovars_text[2]}'
							response = requests.get(f'https://sms-activate.ru/stubs/handler_api.php?api_key={config.token_sms_activate}&action=getMultiServiceNumber&multiService={amm}&country=0')
							if str(response.text) == 'NO_BALANCE':
								for user in config.admin:
									bot.send_message(user, '–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ smsactivate')
							elif str(response.text) == 'NO_NUMBERS':
								bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="üåß –ù–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä")
							elif str(response.text) == 'BAD_SERVICE':
								bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="üåß –ù–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä")
							else:
								print(response.text)
								tovasrs_text = msg.split(':')
								q.execute(f"update ugc_users set balance = balance - '{tovasrs_text[-1]}' where userid = '{call.message.chat.id}'")
								connection.commit()
								now = datetime.datetime.now()
								for i in response.json():
									q.execute(f'''SELECT * FROM ugc_mult_service where tag = "{i['service']}"''')
									service_infa = q.fetchone()
									btn = types.InlineKeyboardMarkup()
									btn.add(types.InlineKeyboardButton(text='üëã –û—Ç–º–µ–Ω–∏—Ç—å',callback_data=f'–æ—Ç–º–µ–Ω–∏—Ç—å_—Å–º—Å_{i["activation"]}_{service_infa[3]}'))
									q.execute("INSERT INTO ugc_phones (userid,nubmer,service,price,phone_id,site,sms,date_get) VALUES ('%s','%s','%s','%s','%s','%s','%s','%s')"%(call.message.chat.id,i['phone'],service_infa[1],service_infa[3],i['activation'],'smsactivate','2',now.strftime("%Y-%m-%d %H:%M:%S")))
									connection.commit()
									bot.send_message(call.message.chat.id, f'''<b>‚ù§Ô∏è –°–µ—Ä–≤–∏—Å: <code>{service_infa[1]}</code>
üì± –í–∞—à –Ω–æ–º–µ—Ä: <code>{response.json()[0]["phone"]}</code>

–ï—Å–ª–∏ —Å–º—Å –Ω–µ –ø—Ä–∏–π–¥–µ—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç, —Ç–æ –≤–∞–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –∑–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä, –∞—Ä–µ–Ω–¥–∞ –Ω–æ–º–µ—Ä–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞!!!</b>''',parse_mode='HTML', reply_markup=btn)
								bot.send_message('-1001270414760', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id={call.message.chat.id}">{call.message.chat.id}</a> –∫—É–ø–∏–ª –º—É–ª—å—Ç–∏—Å–µ—Ä–≤–∏—Å –Ω–æ–º–µ—Ä ({response.json()[0]["phone"]}), —Å–µ—Ä–≤–∏—Å—ã: {tovars_text}',parse_mode='HTML')
						else:
							bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="üíî –ë–∞–ª–∞–Ω—Å–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç")



			if msg == '–≤–µ—Ä–Ω—É—Ç—å—Å—è_–º—É':
				bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text ='üå∫ <b>–ú—É–ª—å—Ç–∏—Å–µ—Ä–≤–∏—Å</b> - –ü–æ–∫—É–ø–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ –æ–¥–∏–Ω –Ω–æ–º–µ—Ä.\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ <b>20%</b> –æ—Ç —Ü–µ–Ω—ã —á—Ç–æ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø—Ä–∏ –∏—Ö –ø–æ–∫—É–ø–∫–µ <b>–æ—Ç–¥–µ–ª—å–Ω–æ</b>',parse_mode='HTML', reply_markup=keyboards.mult_menu)

			if '–º—É–ª—å—Ç' in str(msg):
				connection,q = connect()
				tovars_text = msg.split(':')
				del tovars_text[0]
				price = float(0)
				if len(tovars_text) > 0:
					for i in tovars_text:
						aa = 0
						if len(tovars_text) > 3:
							if str(i) != tovars_text[0]:
								aa += 1
							if str(i) != tovars_text[1]:
								aa += 1
							if str(i) != tovars_text[2]:
								aa += 1

							if str(aa) == '3':
								q.execute(f'SELECT * FROM ugc_mult_service where tag = "{i}"')
								price_first = q.fetchone()
								msg = msg.replace(f":{price_first[2]}", '')
								del tovars_text[3]
								bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text='–ú–∞–∫—Å–∏–º—É–º 3 —Å–µ—Ä–≤–∏—Å–∞')
							else:
								if tovars_text.count(i) > 1:
									q.execute(f'SELECT * FROM ugc_mult_service where tag = "{i}"')
									price_first = q.fetchone()
									msg = msg.replace(f":{price_first[2]}", '')
									tovars_text.remove(i)
						else:
							if tovars_text.count(i) != 1:
								q.execute(f'SELECT * FROM ugc_mult_service where tag = "{i}"')
								price_first = q.fetchone()
								msg = msg.replace(f":{price_first[2]}", '')
								# tovars_text.remove(i)
								tovars_text.remove(i)
				else:
					msg = msg.replace(f":", '')
				
				bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = f'üå∫ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –≤–∞–º —Å–µ—Ä–≤–∏—Å—ã (–Ω–µ –±–æ–ª–µ–µ 3)', parse_mode='html',reply_markup=keyboards.mult_list(msg))





			if str(msg) == '–∞—Ä–µ–Ω–¥–∞':
				bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = f'‚ôªÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Å–µ—Ä–≤–∏—Å', parse_mode='html',reply_markup=keyboards.rent_list())

			if '–∞—Ä–µ–Ω–¥–∞_–∫—É–ø–∏—Ç—å' in str(msg):
				# bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
				btn = types.InlineKeyboardMarkup()
				btn.add(types.InlineKeyboardButton(text='üá∑üá∫ –†–æ—Å—Å–∏—è',callback_data=f'–∞—Ä–µ–Ω–¥–∞_—Ä–æ—Å—Å–∏—è_{str(msg)[13:]}'))
				btn.add(types.InlineKeyboardButton(text='üîô',callback_data=f'–≤–µ—Ä–Ω—É—Ç—å—Å—è_—Å–µ—Ä–≤–∏—Å—ã_–∞—Ä–µ–Ω–¥–∞'))
				# bot.send_message(call.message.chat.id, 'üè≥Ô∏è‚Äçüåà –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º —Å—Ç—Ä–∞–Ω—É',reply_markup=keyboar)
				bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'üè≥Ô∏è‚Äçüåà –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º —Å—Ç—Ä–∞–Ω—É', parse_mode='html',reply_markup=btn)

			if '–∞—Ä–µ–Ω–¥–∞_—Ä–æ—Å—Å–∏—è_' in str(msg):
				am = keyboards.rent_spisok_time(str(msg)[14:])
				if str(am) != '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä':
					bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
					bot.send_message(call.message.chat.id, 'üïê –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä', reply_markup = keyboards.rent_spisok_time(str(msg)[14:]))
				else:
					bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–º–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")


			if '–∞—Ä–µ–Ω–¥–∞_–≤—Ä–µ–º—è' in str(msg):
				connection,q = connect()
				
				response = requests.get(url=f'https://sms-activate.ru/stubs/handler_api.php?api_key={config.token_sms_activate}&action=getRentServicesAndCountries&rent_time={str(msg).split("_")[2]}&country=0').json()
				am = response['services'][str(msg).split("_")[3]]['quant']
				if response['services'][str(msg).split("_")[3]]['quant'] != 0:
					q.execute(f'SELECT * FROM ugc_service_all WHERE code = "{str(msg).split("_")[3]}" and rent = "1"')
					rent = q.fetchone()
					price = str(msg).split('_')[4]
					rent_buy = types.InlineKeyboardMarkup()
					rent_buy.add(types.InlineKeyboardButton(text=f'üí≥ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∑–∞ {"%.2f" % (float(price))} RUB',callback_data=f'–∫—É–ø–∏—Ç—å_–∞—Ä–µ–Ω–¥–∞_{str(msg).split("_")[3]}_{str(msg).split("_")[2]}_{"%.2f" % (float(price))}'))
					# rent_buy.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥',callback_data=f'–≤–µ—Ä–Ω—É—Ç—å—Å—è_–≤—Ä–µ–º—è_–∞—Ä–µ–Ω–¥–∞_{str(msg).split("_")[2]}'))
					bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = f'üõé –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å: <b>{rent[1]}</b>\n‚è≥ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: <b>{str(msg).split("_")[2]} —á.</b>',parse_mode='HTML',reply_markup=rent_buy)
				else:
					bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–º–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")


			if '–∫—É–ø–∏—Ç—å_–∞—Ä–µ–Ω–¥–∞_' in str(msg):
				time.sleep(0.1)
				if call.message.chat.id not in last_time:
					last_time[call.message.chat.id] = time.time()
					buy_rent(call,msg)
				else:
					if (time.time() - last_time[call.message.chat.id]) * 1000 < 2000:
						bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ú–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ 2 —Å–µ–∫.")
						bot.send_message('-1001270414760', f'–ê—Ä–µ–Ω–¥–∞\n–ü–æ–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <a href="tg://user?id={call.message.chat.id}">{call.message.chat.id}</a> —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ 2 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏',parse_mode='HTML')
						return 0
					else:
						last_time[call.message.chat.id] = time.time()
						buy_rent(call,msg)

			if str(msg)[:12] == '–Ω–æ–º–µ—Ä_–∫—É–ø–∏—Ç—å':
				try:
					connection,q = connect()
					bot.send_message('-1001270414760', msg)
					q.execute(f'SELECT code FROM ugc_service_all where id = "{str(msg)[12:]}"')
					row = q.fetchone()[0]
					try:
						bot.send_message(call.message.chat.id, texts.country_list(row,'1',call.message.chat.id),parse_mode='HTML',reply_markup=keyboards.country_list(row,'1',call.message.chat.id))
					except:
						pass
						# bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä")
				except:
					# bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä")
					pass

			if str(msg) == '—Ä–µ–∫–ª–∞–º–∞_—É–¥–∞–ª–∏—Ç—å':
				bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)

			if '–∫—É–ø–∏—Ç—å–Ω–æ–º–µ—Ä_' in str(msg):
				deposit_keyb = types.InlineKeyboardMarkup()
				deposit_keyb.add(types.InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å',callback_data=f"–ø–æ–¥—Ç–≤–µ—Ä–∏—Ç—å–ø–æ–∫—É–ø–∫—É_{str(msg).split('_')[1]}_{str(msg).split('_')[2]}"))
				msgg = bot.send_message(call.message.chat.id,'–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',reply_markup=deposit_keyb)


			if '–ø–æ–¥—Ç–≤–µ—Ä–∏—Ç—å–ø–æ–∫—É–ø–∫—É_' in str(msg):
				time.sleep(0.1)
				if call.message.chat.id not in last_time:
					last_time[call.message.chat.id] = time.time()
					buy_number(call,msg)
				else:
					if (time.time() - last_time[call.message.chat.id]) * 1000 < 2000:
						bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ú–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ 2 —Å–µ–∫.")
						return 0
					else:
						last_time[call.message.chat.id] = time.time()
						buy_number(call,msg)





			if '–æ—Ç–º–µ–Ω–∏—Ç—å_–∞—Ä–µ–Ω–¥–∞_' in str(msg):
				connection,q = connect()
				q.execute(f'''SELECT * FROM ugc_rent_list where rentid = "{str(msg)[16:]}"''')
				ugc_phones = q.fetchone()
				if ugc_phones != None:
					if str(ugc_phones[6]) == '1':
						answer = requests.get(url=f'https://sms-activate.ru/stubs/handler_api.php?api_key={config.token_sms_activate}&action=getRentStatus&id={str(msg).split("_")[2]}').json()
						if answer['status'] == 'success':
							q.execute(f"update ugc_rent_list set activ = '0' where rentid = '{msg[16:]}'")
							connection.commit()
							bot.send_message(call.message.chat.id, f'<b>–ù–æ–º–µ—Ä <code>{ugc_phones[4]}</code> –æ—Ç–º–µ–Ω–µ–Ω, –Ω–æ –¥–µ–Ω—å–≥–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã, –≤–µ–¥—å –≤—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–º—Å –Ω–∞ –Ω–æ–º–µ—Ä</b>',parse_mode='HTML')
						elif answer['status'] == 'error':
							cancel = requests.get(url=f'https://sms-activate.ru/stubs/handler_api.php?api_key={config.token_sms_activate}&action=setRentStatus&id={str(msg).split("_")[2]}&status=2').json()
							if cancel['status'] == 'success':
								if answer['message'] == 'STATUS_FINISH':
									q.execute(f"update ugc_rent_list set activ = '0' where rentid = '{msg[16:]}'")
									connection.commit()
									bot.send_message(call.message.chat.id, f'<b>–ù–æ–º–µ—Ä <code>{ugc_phones[4]}</code> –æ—Ç–º–µ–Ω–µ–Ω, –Ω–æ –¥–µ–Ω—å–≥–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã, –¥–µ–π—Å—Ç–≤–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>',parse_mode='HTML')
								elif answer['message'] == 'STATUS_CANCEL':
									q.execute(f"update ugc_rent_list set activ = '0' where rentid = '{msg[16:]}'")
									connection.commit()
									bot.send_message(call.message.chat.id, f'<b>–ù–æ–º–µ—Ä <code>{ugc_phones[4]}</code> –æ—Ç–º–µ–Ω–µ–Ω, –Ω–æ –¥–µ–Ω—å–≥–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã, –¥–µ–π—Å—Ç–≤–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>',parse_mode='HTML')

								elif answer['message'] == 'STATUS_WAIT_CODE':
									q.execute(f"update ugc_rent_list set activ = '0' where rentid = '{msg[16:]}'")
									connection.commit()
									q.execute(f"update ugc_users set balance = balance + '{ugc_phones[5]}' where userid = '{ugc_phones[1]}'")
									connection.commit()
									bot.send_message(call.message.chat.id, f'<b>–ù–æ–º–µ—Ä <code>{ugc_phones[4]}</code> –æ—Ç–º–µ–Ω–µ–Ω, –Ω–∞ –±–∞–ª–∞–Ω—Å –≤–µ—Ä–Ω—É–ª–∏ {ugc_phones[5]} —Ä—É–±</b>',parse_mode='HTML')
							elif cancel['message'] == 'CANT_CANCEL':
								q.execute(f"update ugc_rent_list set activ = '0' where rentid = '{msg[16:]}'")
								connection.commit()
								bot.send_message(call.message.chat.id, f'<b>–ù–æ–º–µ—Ä <code>{ugc_phones[4]}</code> –æ—Ç–º–µ–Ω–µ–Ω, –Ω–æ –¥–µ–Ω—å–≥–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã, –ø—Ä–æ—à–ª–æ 20 –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏</b>',parse_mode='HTML')







			if '–æ—Ç–º–µ–Ω–∏—Ç—å_—Å–º—Å_' in str(msg):
				try:
					connection,q = connect()
					q.execute(f'''SELECT site FROM ugc_phones where phone_id = "{str(msg).split('_')[2]}"''')
					site = q.fetchone()[0]
					q.execute(f'''SELECT * FROM ugc_phones where phone_id = "{str(msg).split('_')[2]}"''')
					ugc_phones = q.fetchone()
					if site == 'smshub':
						activation = GetStatus(
									id=str(msg).split('_')[2],
								).request(wrapper)
						if activation['status'] == 'STATUS_OK':
							deactivation = SetStatus(id=str(msg).split('_')[2],status='8').request(wrapper)
							q.execute(f"""update ugc_phones set sms = '0' where phone_id = '{str(msg).split('_')[2]}'""")
							connection.commit()
							bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="–ù–æ–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
							bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
						elif activation['status'] == 'STATUS_WAIT_CODE':
							if str(ugc_phones[4]) == '3':
								deactivation = SetStatus(id=str(msg).split('_')[2],status='8').request(wrapper)
								bot.send_message('-1001270414760', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id={call.message.chat.id}">{call.message.chat.id}</a> –Ω–∞–∂–∞–ª –Ω–∞ –æ—Ç–º–µ–Ω—É –Ω–æ–º–µ—Ä–∞ ({ugc_phones[2]}), —Å–µ—Ä–≤–∏—Å {ugc_phones[3]}\n{deactivation}',parse_mode='HTML')
								q.execute(f"""update ugc_phones set sms = '0' where phone_id = '{str(msg).split('_')[2]}'""")
								connection.commit()
								bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="–ù–æ–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
								bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
							else:
								deactivation = SetStatus(id=str(msg).split('_')[2],status='8').request(wrapper)
								bot.send_message('-1001270414760', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id={call.message.chat.id}">{call.message.chat.id}</a> –Ω–∞–∂–∞–ª –Ω–∞ –æ—Ç–º–µ–Ω—É –Ω–æ–º–µ—Ä–∞ ({ugc_phones[2]}), —Å–µ—Ä–≤–∏—Å {ugc_phones[3]}\n{deactivation}',parse_mode='HTML')
								bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="–ù–æ–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω, –¥–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã")
								q.execute(f"""update ugc_statistika set summa_phones = summa_phones - '{float(str(msg).split("_")[3]) - float(ugc_phones[5])}'""")
								connection.commit()
								q.execute(f"""update ugc_users set balance = balance + '{str(msg).split("_")[3]}' where userid = '{call.message.chat.id}'""")
								connection.commit()
								q.execute(f"""update ugc_phones set sms = '0' where phone_id = '{str(msg).split('_')[2]}'""")
								connection.commit()
								bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
						else:
							bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ù–æ–º–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
							bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
					else:
						answer = requests.get(url=f'https://sms-activate.ru/stubs/handler_api.php?api_key={config.token_sms_activate}&action=getStatus&id={str(msg).split("_")[2]}')
						if answer.text == 'STATUS_OK':
							deactivation = requests.get(url=f"https://sms-activate.ru/stubs/handler_api.php?api_key={config.token_sms_activate}&action=setStatus&status=8&id={str(msg).split('_')[2]}")
							q.execute(f"""update ugc_phones set sms = '0' where phone_id = '{str(msg).split('_')[2]}'""")
							connection.commit()
							bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="–ù–æ–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
							bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
						elif answer.text == 'STATUS_WAIT_CODE':
							if str(ugc_phones[4]) == '3':
								deactivation = requests.get(url=f"https://sms-activate.ru/stubs/handler_api.php?api_key={config.token_sms_activate}&action=setStatus&status=8&id={str(msg).split('_')[2]}")
								bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="–ù–æ–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
								bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
							else:
								deactivation = requests.get(url=f"https://sms-activate.ru/stubs/handler_api.php?api_key={config.token_sms_activate}&action=setStatus&status=8&id={str(msg).split('_')[2]}")
								bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="–ù–æ–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω, –¥–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã")
								q.execute(f"""update ugc_statistika set summa_phones = summa_phones - '{float(str(msg).split("_")[3]) - float(ugc_phones[5])}'""")
								connection.commit()
								q.execute(f"""update ugc_users set balance = balance + '{str(msg).split("_")[3]}' where userid = '{call.message.chat.id}'""")
								connection.commit()
								q.execute(f"""update ugc_phones set sms = '0' where phone_id = '{str(msg).split('_')[2]}'""")
								connection.commit()
								bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
						else:
							bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ù–æ–º–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
							bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
				except:
					bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)


	except Exception as e:
		if 'Telegram API was unsuccessful. Error code: 400. Description: Bad Request: message text is empty' not in traceback.format_exc():
			if 'Telegram API was unsuccessful. Error code: 400. Description: Bad Request: message to delete not found' not in traceback.format_exc():
				if 'Request: message is not modified: specified new message content and reply markup are exactly the same as a current content and reply markup of the message' not in traceback.format_exc():
					bot.send_message(825416463,traceback.format_exc())


def send_photoorno(message):
	global text_send_all
	global json_entit
	text_send_all = message.text
	json_entit = None
	if 'entities' in message.json:
		json_entit = message.json['entities']
	msg = bot.send_message(message.chat.id, '<b>–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É\n–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å</b>\n\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–ù–µ—Ç", —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –¥–∞—Ç—É –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: –≥–æ–¥-–º–µ—Å—è—Ü-—á–∏—Å–ª–æ —á–∞—Å—ã:–º–∏–Ω—É—Ç—ã (–ø—Ä–∏–º–µ—Ä: 2020-12-09 15:34)',parse_mode='HTML')
	bot.register_next_step_handler(msg, admin_send_message_all_text_rus)

def admin_send_message_all_text_rus(message):
	# try:
		global photoo
		global keyboar
		global time_send
		global v
		time_send = message.text.split('\n')[2]
		photoo = message.text.split('\n')[1]
		keyboar = message.text.split('\n')[0]
		v = 0
		if str(photoo.lower()) != '–ù–µ—Ç'.lower():
			v = v+1
			
		if str(keyboar.lower()) != '–ù–µ—Ç'.lower():
			v = v+2

		if v == 0:
			msg = bot.send_message(message.chat.id,  text_send_all,parse_mode='HTML')
			bot.register_next_step_handler(msg, admin_send_message_all_text_da_rus)
		
		elif v == 1:
			msg = bot.send_photo(message.chat.id,str(photoo),  text_send_all,parse_mode='HTML')
			bot.register_next_step_handler(msg, admin_send_message_all_text_da_rus)

		elif v == 2:
			msg = bot.send_message(message.chat.id,  text_send_all,parse_mode='HTML')
			bot.register_next_step_handler(msg, admin_send_message_all_text_da_rus)

		elif v == 3:
			msg = bot.send_photo(message.chat.id,str(photoo),  text_send_all,parse_mode='HTML')
			bot.register_next_step_handler(msg, admin_send_message_all_text_da_rus)
	# except:
	# 	bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",parse_mode='HTML')

def admin_send_message_all_text_da_rus(message):
	otvet = message.text
	colvo_send_message_users = 0
	colvo_dont_send_message_users = 0
	if message.text.lower() == '–î–∞'.lower():
		if time_send.lower() == '–Ω–µ—Ç':
			bot.send_message(message.chat.id, f'<b>–°–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ, –Ω–æ –ø—Ä–∏–±–∞–≤–∏–≤ –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ 2-3 –º–∏–Ω—É—Ç—ã</b>',parse_mode='HTML')
				# except:
				# 	bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: '+ str(colvo_send_message_users)+'\n–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: '+ str(colvo_dont_send_message_users))
		else:
			connection,q = connect()
			
			q.execute("INSERT INTO ugc_temp_sending (text,image,button,date) VALUES ('%s','%s','%s','%s')"%(text_send_all,photoo,keyboar,time_send))
			connection.commit()
			q.execute('update ugc_temp_sending set entit = "{}" where date = "{}"'.format(json_entit, time_send))
			connection.commit()
			bot.send_message(message.chat.id, f'<b>–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É <code>{time_send}</code></b>',parse_mode='HTML')

def buy_rent(call,msg):
	connection,q = connect()
	q.execute(f'SELECT * FROM ugc_users WHERE userid = "{call.message.chat.id}"')
	row = q.fetchone()
	q.execute(f'SELECT * FROM ugc_country WHERE id = "{row[3]}"')
	country = '0'
	response = requests.get(url=f'https://sms-activate.ru/stubs/handler_api.php?api_key={config.token_sms_activate}&action=getRentServicesAndCountries&rent_time={str(msg).split("_")[3]}&country={country}').json()
	am = response['services'][str(msg).split("_")[2]]['quant']
	if response['services'][str(msg).split("_")[2]]['quant'] != 0:
		q.execute(f'SELECT * FROM asd WHERE da = "{str(msg).split("_")[2]}"')
		rent = q.fetchone()
		price = str(msg).split('_')[4]
		amn = float(price)
		if float(row[2]) >= float(amn):
			operators = ["beeline", "matrix", "megafon", "motiv", "mts", "rostelecom", "sber", "simsim", "tele2", "tinkoff", "winmobile", "yota"]
			get_phone = requests.get(url=f'https://sms-activate.ru/stubs/handler_api.php?api_key={config.token_sms_activate}&action=getRentNumber&service={str(msg).split("_")[2]}&rent_time={str(msg).split("_")[3]}&country={country}').json()
			if get_phone['status'] == 'success':
				q.execute(f"""update ugc_users set balance = balance - '{"%.2f" % (float(price))}' where userid = """ + str(call.message.chat.id))
				connection.commit()
				now = datetime.datetime.now()
				bot.send_message('-1001270414760', f'#–ê—Ä–µ–Ω–¥–∞\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id={call.message.chat.id}">{call.message.chat.id}</a> –∞—Ä–µ–Ω–¥–æ–≤–∞–ª –Ω–æ–º–µ—Ä ({get_phone["phone"]["number"]}), —Å–µ—Ä–≤–∏—Å: {rent[0]}\n{get_phone}',parse_mode='HTML')
				bot.send_message(config.chat_new_phone, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id={call.message.chat.id}">{call.message.chat.id}</a> –∞—Ä–µ–Ω–¥–æ–≤–∞–ª –Ω–æ–º–µ—Ä ({get_phone["phone"]["number"]}), —Å–µ—Ä–≤–∏—Å: {rent[0]}',parse_mode='HTML')
				q.execute("INSERT INTO ugc_rent_list (userid,name,rentid,phone,price,data_start,data_end) VALUES ('%s','%s','%s','%s','%s','%s','%s')"%(call.message.chat.id,rent[0],get_phone['phone']['id'],get_phone['phone']['number'],price,now.strftime("%Y-%m-%d %H:%M:%S"),get_phone['phone']['endDate']))
				connection.commit()
				bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = texts.rent_text(call.message.chat.id,get_phone['phone']['id']),parse_mode='HTML')
			else:
				bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ù–µ –Ω–∞—à–ª–∏ –Ω–æ–º–µ—Ä")
		else:
			bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ë–∞–ª–∞–Ω—Å–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç")
	else:
		bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä")

def buy_number(call, msg):
	# if (time.time() - last_time[call.message.chat.id]) * 1000 < 2000:
	# 	bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ú–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ 2 —Å–µ–∫.")
	# 	return 0
	# else:
	# 	last_time[call.message.chat.id] = time.time()
	connection,q = connect()
	service = str(msg).split('_')[1]
	country = str(msg).split('_')[2]
	q.execute(f'SELECT * FROM ugc_users where userid = "{call.message.chat.id}"')
	user_infa = q.fetchone()
	q.execute(f'SELECT id FROM ugc_country where idd = "{country}"')
	countr_idd = q.fetchone()
	q.execute(f'SELECT * FROM ugc_service_all where code = "{service}" and country = "{countr_idd[0]}"')
	service_info = q.fetchone()
	now = datetime.datetime.now()
	if service_info[6] == 'smshub':
		if float(service_info[4]) <= float(user_infa[2]):
			# try:
				buy_number = types.InlineKeyboardMarkup()
				buy_number.add(types.InlineKeyboardButton(text='üìã –ú–µ–Ω—é',callback_data=f'–≤–µ—Ä–Ω—É—Ç—å—Å—è_–Ω–∞–∑–∞–¥'))
				q.execute(f'SELECT idd FROM ugc_country where id = "{service_info[3]}"')
				countr_idd = q.fetchone()
				q.execute(f"update ugc_users set balance = balance - '{service_info[4]}' where userid = " + str(call.message.chat.id))
				connection.commit()
				if str(service_info[3]) == 'russia':
					operators = ["beeline", "matrix", "megafon", "motiv", "mts", "rostelecom", "sber", "simsim", "tele2", "tinkoff", "winmobile", "yota"]
					activation = requests.get(url=f'https://smshub.org/stubs/handler_api.php?api_key={config.token_sms}&action=getNumber&service={service}&operator={random.choice(operators)}&country={countr_idd[0]}')
				else:
					activation = requests.get(url=f'https://smshub.org/stubs/handler_api.php?api_key={config.token_sms}&action=getNumber&service={service}&country={countr_idd[0]}')
				if 'ACCESS_NUMBER' in activation.text:
					print(activation.text)
					bot.send_message('-1001270414760', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id={call.message.chat.id}">{call.message.chat.id}</a> –∫—É–ø–∏–ª –Ω–æ–º–µ—Ä —Å —Å–µ—Ä–≤–∏—Å–∞ —Å–º—Å—Ö–∞–± ({activation.text.split(":")[2]}), —Å–µ—Ä–≤–∏—Å: {service_info[1]}\n{activation.text}',parse_mode='HTML')
					bot.send_message(config.chat_new_phone, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id={call.message.chat.id}">{call.message.chat.id}</a> –∫—É–ø–∏–ª –Ω–æ–º–µ—Ä ({activation.text.split(":")[2]}), —Å–µ—Ä–≤–∏—Å: {service_info[1]}',parse_mode='HTML')
					check = types.InlineKeyboardMarkup()
					check.add(types.InlineKeyboardButton(text='‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å',callback_data=f"–æ—Ç–º–µ–Ω–∏—Ç—å_—Å–º—Å_{activation.text.split(':')[1]}_{service_info[4]}"))
					q.execute("INSERT INTO ugc_phones (userid,nubmer,service,price,phone_id,site,sms,date_get) VALUES ('%s','%s','%s','%s','%s','%s','%s','%s')"%(call.message.chat.id,activation.text.split(':')[2],service_info[1],service_info[4],activation.text.split(':')[1],'smshub','2',now.strftime("%Y-%m-%d %H:%M:%S")))
					connection.commit()

					bot.send_message(call.message.chat.id, f'''‚ù§Ô∏è –°–µ—Ä–≤–∏—Å: {service_info[1]}
üì± –í–∞—à –Ω–æ–º–µ—Ä: <code>{activation.text.split(':')[2]}</code>
–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏—Ö–æ–¥–∞ —Å–º—Å

–ï—Å–ª–∏ —Å–º—Å –Ω–µ –ø—Ä–∏–π–¥–µ—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç, —Ç–æ –≤–∞–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –∑–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä, –∞—Ä–µ–Ω–¥–∞ –Ω–æ–º–µ—Ä–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞!!!''',parse_mode='HTML',reply_markup=check)

				elif 'NO_NUMBERS' in activation.text:
					activation_two = requests.get(url=f"https://sms-activate.ru/stubs/handler_api.php?api_key={config.token_sms_activate}&action=getNumber&service={service}&country={countr_idd[0]}")
					print(activation_two.text)
					bot.send_message('-1001270414760', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç–µ–ª –∫—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä, –Ω–æ –Ω–∞ —Å–º—Å—Ö–∞–± –Ω–µ—Ç, –∏–¥–µ–º –Ω–∞ smsactivate: <a href="tg://user?id={call.message.chat.id}">{call.message.chat.id}</a>, —Å–µ—Ä–≤–∏—Å: {service_info[1]}\n{activation.text}',parse_mode='HTML')
					if activation_two.text == 'NO_NUMBERS' or activation_two.text == 'NO_BALANCE':
						q.execute(f"update ugc_users set balance = balance + '{service_info[4]}' where userid = " + str(call.message.chat.id))
						connection.commit()
						bot.send_message('-1001270414760', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç–µ–ª –∫—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä, –Ω–æ –Ω–æ–º–µ—Ä–æ–≤ –Ω–∏–≥–¥–µ –Ω–µ—Ç: <a href="tg://user?id={call.message.chat.id}">{call.message.chat.id}</a>, —Å–µ—Ä–≤–∏—Å: {service_info[1]}\n{activation_two.text}',parse_mode='HTML')
						bot.send_message(call.message.chat.id, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è!')
					elif 'ACCESS_NUMBER' in activation_two.text:
						bot.send_message(config.chat_new_phone, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id={call.message.chat.id}">{call.message.chat.id}</a> –∫—É–ø–∏–ª –Ω–æ–º–µ—Ä ({activation_two.text.split(":")[2]}), —Å–µ—Ä–≤–∏—Å: {service_info[1]}',parse_mode='HTML')
						check = types.InlineKeyboardMarkup()
						bot.send_message('-1001270414760', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id={call.message.chat.id}">{call.message.chat.id}</a> –∫—É–ø–∏–ª –Ω–æ–º–µ—Ä —Å —Å–µ—Ä–≤–∏—Å–∞ smsactivate ({activation_two.text.split(":")[2]}), —Å–µ—Ä–≤–∏—Å: {service_info[1]}\n{activation_two.text}',parse_mode='HTML')
						check.add(types.InlineKeyboardButton(text='‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å',callback_data=f"–æ—Ç–º–µ–Ω–∏—Ç—å_—Å–º—Å_{activation_two.text.split(':')[1]}_{service_info[4]}"))
						q.execute("INSERT INTO ugc_phones (userid,nubmer,service,price,phone_id,site,sms,date_get) VALUES ('%s','%s','%s','%s','%s','%s','%s','%s')"%(call.message.chat.id,activation_two.text.split(':')[2],service_info[1],service_info[4],activation_two.text.split(':')[1],'smsactivate','2',now.strftime("%Y-%m-%d %H:%M:%S")))
						connection.commit()
						bot.send_message(call.message.chat.id, f'''‚ù§Ô∏è –°–µ—Ä–≤–∏—Å: {service_info[1]}
üì± –í–∞—à –Ω–æ–º–µ—Ä: <code>{activation_two.text.split(':')[2]}</code>
–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏—Ö–æ–¥–∞ —Å–º—Å

–ï—Å–ª–∏ —Å–º—Å –Ω–µ –ø—Ä–∏–π–¥–µ—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç, —Ç–æ –≤–∞–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –∑–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä, –∞—Ä–µ–Ω–¥–∞ –Ω–æ–º–µ—Ä–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞!!!''',parse_mode='HTML',reply_markup=check)
					else:
						if activation_two.text == 'NO_BALANCE':
							bot.send_message(config.chat_new_phone, f'–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å–∞–π—Ç–µ',parse_mode='HTML')
							bot.send_message('-1001270414760', f'–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å–∞–π—Ç–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id={call.message.chat.id}">{call.message.chat.id}</a>',parse_mode='HTML')
						q.execute(f"update ugc_users set balance = balance + '{service_info[4]}' where userid = " + str(call.message.chat.id))
						connection.commit()
						bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")

				else:
					if activation.text == 'NO_BALANCE':
						bot.send_message(config.chat_new_phone, f'–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å–∞–π—Ç–µ',parse_mode='HTML')
						bot.send_message('-1001270414760', f'–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å–∞–π—Ç–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id={call.message.chat.id}">{call.message.chat.id}</a>',parse_mode='HTML')
					q.execute(f"update ugc_users set balance = balance + '{service_info[4]}' where userid = " + str(call.message.chat.id))
					connection.commit()
					bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")


			# except:
			# 	q.execute(f"update ugc_users set balance = balance + '{service_info[4]}' where userid = " + str(call.message.chat.id))
			# 	connection.commit()
			# 	bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–º–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")
		else:
			bot.send_message('-1001270414760', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –±–∞–ª–∞–Ω—Å–∞: <a href="tg://user?id={call.message.chat.id}">{call.message.chat.id}</a>',parse_mode='HTML')
			bot.send_message(call.message.chat.id,'–ë–∞–ª–∞–Ω—Å–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç')

	else:
		if float(service_info[4]) <= float(user_infa[2]):
			try:
				buy_number = types.InlineKeyboardMarkup()
				# buy_number.add(types.InlineKeyboardButton(text='üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑',callback_data=f'–∫—É–ø–∏—Ç—å_–Ω–æ–º–µ—Ä_{str(msg)[13:]}'))
				buy_number.add(types.InlineKeyboardButton(text='üìã –ú–µ–Ω—é',callback_data=f'–≤–µ—Ä–Ω—É—Ç—å—Å—è_–Ω–∞–∑–∞–¥'))
				q.execute(f'SELECT idd FROM ugc_country where id = "{service_info[3]}"')
				countr_idd = q.fetchone()
				q.execute(f"update ugc_users set balance = balance - '{service_info[4]}' where userid = " + str(call.message.chat.id))
				connection.commit()
				# activation = requests.get(url=f'https://smshub.org/stubs/handler_api.php?api_key={config.token_sms}&action=getNumber&service={service}&country={countr_idd[0]}')
				activation = requests.get(url=f"https://sms-activate.ru/stubs/handler_api.php?api_key={config.token_sms_activate}&action=getNumber&service={service}&country={countr_idd[0]}")
				if 'ACCESS_NUMBER' in activation.text:
					print(activation.text)
					bot.send_message('-1001270414760', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id={call.message.chat.id}">{call.message.chat.id}</a> –∫—É–ø–∏–ª –Ω–æ–º–µ—Ä —Å —Å–µ—Ä–≤–∏—Å–∞ smsactivate({activation.text.split(":")[2]}), —Å–µ—Ä–≤–∏—Å: {service_info[1]}\n{activation.text}',parse_mode='HTML')
					bot.send_message(config.chat_new_phone, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id={call.message.chat.id}">{call.message.chat.id}</a> –∫—É–ø–∏–ª –Ω–æ–º–µ—Ä ({activation.text.split(":")[2]}), —Å–µ—Ä–≤–∏—Å: {service_info[1]}',parse_mode='HTML')
					check = types.InlineKeyboardMarkup()
					check.add(types.InlineKeyboardButton(text='‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å',callback_data=f"–æ—Ç–º–µ–Ω–∏—Ç—å_—Å–º—Å_{activation.text.split(':')[1]}_{service_info[4]}"))
					q.execute("INSERT INTO ugc_phones (userid,nubmer,service,price,phone_id,site,sms,date_get) VALUES ('%s','%s','%s','%s','%s','%s','%s','%s')"%(call.message.chat.id,activation.text.split(':')[2],service_info[1],service_info[4],activation.text.split(':')[1],'smsactivate','2',now.strftime("%Y-%m-%d %H:%M:%S")))
					connection.commit()
					bot.send_message(call.message.chat.id, f'''‚ù§Ô∏è –°–µ—Ä–≤–∏—Å: {service_info[1]}
üì± –í–∞—à –Ω–æ–º–µ—Ä: <code>{activation.text.split(':')[2]}</code>
–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏—Ö–æ–¥–∞ —Å–º—Å

–ï—Å–ª–∏ —Å–º—Å –Ω–µ –ø—Ä–∏–π–¥–µ—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç, —Ç–æ –≤–∞–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –∑–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä, –∞—Ä–µ–Ω–¥–∞ –Ω–æ–º–µ—Ä–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞!!!''',parse_mode='HTML',reply_markup=check)

				elif 'NO_NUMBERS' in activation.text or activation.text == 'NO_BALANCE':
					if str(service_info[3]) == 'russia':
						operators = ["beeline", "matrix", "megafon", "motiv", "mts", "rostelecom", "sber", "simsim", "tele2", "tinkoff", "winmobile", "yota"]
						activation_two = requests.get(url=f'https://smshub.org/stubs/handler_api.php?api_key={config.token_sms}&action=getNumber&service={service}&operator={random.choice(operators)}&country={countr_idd[0]}')
					else:
						activation_two = requests.get(url=f'https://smshub.org/stubs/handler_api.php?api_key={config.token_sms}&action=getNumber&service={service}&country={countr_idd[0]}')
					print(activation_two.text)
					if activation_two.text == 'NO_NUMBERS':
						bot.send_message('-1001270414760', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç–µ–ª –∫—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä –µ–≥–æ –Ω–∏–≥–¥–µ –Ω–µ—Ç: <a href="tg://user?id={call.message.chat.id}">{call.message.chat.id}</a> {activation_two.text}',parse_mode='HTML')
						q.execute(f"update ugc_users set balance = balance + '{service_info[4]}' where userid = " + str(call.message.chat.id))
						connection.commit()
						bot.send_message(call.message.chat.id, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è!')
					elif 'ACCESS_NUMBER' in activation_two.text:
						bot.send_message(config.chat_new_phone, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id={call.message.chat.id}">{call.message.chat.id}</a> –∫—É–ø–∏–ª –Ω–æ–º–µ—Ä ({activation_two.text.split(":")[2]}), —Å–µ—Ä–≤–∏—Å: {service_info[1]}',parse_mode='HTML')
						check = types.InlineKeyboardMarkup()
						check.add(types.InlineKeyboardButton(text='‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å',callback_data=f"–æ—Ç–º–µ–Ω–∏—Ç—å_—Å–º—Å_{activation_two.text.split(':')[1]}_{service_info[4]}"))
						q.execute("INSERT INTO ugc_phones (userid,nubmer,service,price,phone_id,site,sms,date_get) VALUES ('%s','%s','%s','%s','%s','%s','%s','%s')"%(call.message.chat.id,activation_two.text.split(':')[2],service_info[1],service_info[4],activation_two.text.split(':')[1],'smshub','2',now.strftime("%Y-%m-%d %H:%M:%S")))
						connection.commit()
						bot.send_message('-1001270414760', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id={call.message.chat.id}">{call.message.chat.id}</a> –∫—É–ø–∏–ª –Ω–æ–º–µ—Ä —Å —Å–º—Å—Ö–∞–± ({activation_two.text.split(":")[2]}), —Å–µ—Ä–≤–∏—Å: {service_info[1]}\n{activation_two.text}',parse_mode='HTML')
						bot.send_message(call.message.chat.id, f'''‚ù§Ô∏è –°–µ—Ä–≤–∏—Å: {service_info[1]}
üì± –í–∞—à –Ω–æ–º–µ—Ä: <code>{activation_two.text.split(':')[2]}</code>
–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏—Ö–æ–¥–∞ —Å–º—Å

–ï—Å–ª–∏ —Å–º—Å –Ω–µ –ø—Ä–∏–π–¥–µ—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç, —Ç–æ –≤–∞–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –∑–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä, –∞—Ä–µ–Ω–¥–∞ –Ω–æ–º–µ—Ä–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞!!!''',parse_mode='HTML',reply_markup=check)
					else:
						if activation_two.text == 'NO_BALANCE':
							bot.send_message(config.chat_new_phone, f'–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å–∞–π—Ç–µ',parse_mode='HTML')
							bot.send_message('-1001270414760', f'–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å–∞–π—Ç–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id={call.message.chat.id}">{call.message.chat.id}</a>',parse_mode='HTML')
						q.execute(f"update ugc_users set balance = balance + '{service_info[4]}' where userid = " + str(call.message.chat.id))
						connection.commit()
						bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")

				else:
					if activation.text == 'NO_BALANCE':
						bot.send_message(config.chat_new_phone, f'–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å–∞–π—Ç–µ',parse_mode='HTML')
						bot.send_message('-1001270414760', f'–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å–∞–π—Ç–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id={call.message.chat.id}">{call.message.chat.id}</a>',parse_mode='HTML')
					q.execute(f"update ugc_users set balance = balance + '{service_info[4]}' where userid = " + str(call.message.chat.id))
					connection.commit()
					bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")


			except:
				q.execute(f"update ugc_users set balance = balance + '{service_info[4]}' where userid = " + str(call.message.chat.id))
				connection.commit()
				bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–º–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")
		else:
			bot.send_message(call.message.chat.id,'–ë–∞–ª–∞–Ω—Å–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç')




bot.polling(none_stop=True)
